import pdfMake from 'pdfmake/build/pdfmake';
import { vfs } from 'pdfmake/build/vfs_fonts';
import { TDocumentDefinitions } from 'pdfmake/interfaces';
import fetch from 'node-fetch';

pdfMake.vfs = vfs;

async function getBase64FromUrl(url: string): Promise<string> {
  const response = await fetch(url);
  const buffer = await response.arrayBuffer();
  return `data:image/png;base64,${Buffer.from(buffer).toString('base64')}`;
}

export const generateSimplePdf = async (
  content: any,
  title: string,
  dateRange: string,
  logoUrl: string // Accept URL as parameter
): Promise<Buffer> => {
  const imageDataUrl = await getBase64FromUrl(logoUrl);

  const docDefinition: TDocumentDefinitions = {
    content: [
      {
        image: imageDataUrl, // Logo from URL
        width: 110, // Normal size
        alignment: 'center',
        margin: [0, 0, 0, 10]
      },
      { text: title, style: 'header' },
      { text: `Report Period: ${dateRange}\n`, style: 'subheader' },
      ...content,
      {
        text: '\n\nNotes:\n' +
              '• This report was automatically generated by the Lachs Golden ERP System\n' +
              '• Data is accurate as of the report generation date\n' +
              '• Confidential: This document contains proprietary business information',
        style: 'notes'
      }
    ],
    footer: (currentPage: number, pageCount: number) => ({
      columns: [
        {
          text: 'Toronto, Ontario, Canada\ninfo@lachsgolden.com\n+12362395076',
          alignment: 'left',
          margin: [40, 10, 0, 0],
          fontSize: 9
        },
        {
          text: `Page ${currentPage} of ${pageCount}`,
          alignment: 'right',
          margin: [0, 10, 40, 0],
          fontSize: 9
        }
      ]
    }),
    styles: {
      header: {
        fontSize: 22,
        bold: true,
        alignment: 'center',
        margin: [0, 0, 0, 10]
      },
      subheader: {
        fontSize: 16,
        alignment: 'center',
        color: '#555'
      },
      notes: {
        fontSize: 10,
        color: '#777',
        italics: true
      }
    }
  };

  const pdfDoc = pdfMake.createPdf(docDefinition);

  return new Promise<Buffer>((resolve) => {
    pdfDoc.getBuffer((buffer) => {
      resolve(buffer);
    });
  });
};
