// lib/pdf/simplePdfGenerator.ts
import PdfPrinter from 'pdfmake';
import { TDocumentDefinitions } from 'pdfmake/interfaces';
import fs from 'fs';
import path from 'path';

// ðŸ‘‡ point to actual font files on disk
const fonts = {
  Roboto: {
    normal: 'fonts/Roboto-Regular.ttf',
    bold: 'fonts/Roboto-Bold.ttf',
    italics: 'fonts/Roboto-Italic.ttf',
    bolditalics: 'fonts/Roboto-Medium.ttf',
  }
};


const printer = new PdfPrinter(fonts);

export const generateSimplePdf = (
  content: any,
  title: string,
  dateRange: string
): Promise<Buffer> => {
  const docDefinition: TDocumentDefinitions = {
    content: [
      { text: title, style: 'header' },
      { text: `Report Period: ${dateRange}\n`, style: 'subheader' },
      ...content,
      {
        text:
          '\n\nNotes:\n' +
          'â€¢ This report was automatically generated by the Lachs Golden ERP System\n' +
          'â€¢ Data is accurate as of the report generation date\n' +
          'â€¢ Confidential: This document contains proprietary business information',
        style: 'notes',
      },
    ],
    styles: {
      header: { fontSize: 22, bold: true, alignment: 'center', margin: [0, 0, 0, 10] },
      subheader: { fontSize: 16, alignment: 'center', color: '#555' },
      tableHeader: { bold: true, fillColor: '#f0f0f0' },
      notes: { fontSize: 10, color: '#777', italics: true },
    },
    defaultStyle: { font: 'Roboto' },
  };

  const pdfDoc = printer.createPdfKitDocument(docDefinition);

  return new Promise<Buffer>((resolve, reject) => {
    const chunks: Buffer[] = [];
    pdfDoc.on('data', (chunk) => chunks.push(chunk));
    pdfDoc.on('end', () => resolve(Buffer.concat(chunks)));
    pdfDoc.on('error', reject);
    pdfDoc.end();
  });
};
