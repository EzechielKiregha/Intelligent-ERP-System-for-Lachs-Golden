// lib/pdf/simplePdfGenerator.ts
import pdfMake from 'pdfmake/build/pdfmake';
import { vfs } from 'pdfmake/build/vfs_fonts';  // Correct import for 0.2.18
import { TDocumentDefinitions } from 'pdfmake/interfaces';
import fs from 'fs';

const logoBase64 = fs.readFileSync('public/images/logo.png').toString('base64');
const imageDataUrl = `data:image/png;base64,${logoBase64}`;

  // Initialize with default fonts ONCE (critical for Vercel)
  pdfMake.vfs = vfs;

/**
 * Generates a simple PDF document with Lachs Golden branding
 */
export const generateSimplePdf = (
  content: any,
  title: string,
  dateRange: string
): Promise<Buffer> => {

  const docDefinition: TDocumentDefinitions = {
    content: [
      {
        image: logoBase64, // Logo at the top
        width: 120, // Adjust size
        alignment: 'center',
        margin: [0, 0, 0, 10] // Spacing below logo
      },
      { text: title, style: 'header' },
      { text: `Report Period: ${dateRange}\n`, style: 'subheader' },
      ...content,
      {
        text: '\n\nNotes:\n' +
              '• This report was automatically generated by the Lachs Golden ERP System\n' +
              '• Data is accurate as of the report generation date\n' +
              '• Confidential: This document contains proprietary business information',
        style: 'notes'
      }
    ],
    footer: (currentPage: number, pageCount: number) => {
      return {
        columns: [
          {
            text: 'Toronto, Ontario, Canada\ninfo@lachsgolden.com\n+12362395076',
            alignment: 'left',
            margin: [40, 10, 0, 0],
            fontSize: 9
          },
          {
            text: `Page ${currentPage} of ${pageCount}`,
            alignment: 'right',
            margin: [0, 10, 40, 0],
            fontSize: 9
          }
        ]
      };
    },
    styles: {
      header: {
        fontSize: 22,
        bold: true,
        alignment: 'center',
        margin: [0, 0, 0, 10]
      },
      subheader: {
        fontSize: 16,
        alignment: 'center',
        color: '#555'
      },
      tableHeader: {
        bold: true,
        fillColor: '#f0f0f0'
      },
      notes: {
        fontSize: 10,
        color: '#777',
        italics: true
      }
    }
  };

  const pdfDoc = pdfMake.createPdf(docDefinition);
  
  return new Promise<Buffer>((resolve) => {
    pdfDoc.getBuffer((buffer) => {
      resolve(buffer);
    });
  });
};