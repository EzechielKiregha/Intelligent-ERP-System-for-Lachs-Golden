// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MEMBER
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PerformanceRating {
  EXCEEDS
  MEETS
  NEEDS_IMPROVEMENT
}

enum TaskStatus {
  BACKLOG
  IN_PROGRESS
  TODO
  DONE
  IN_REVIEW
}

enum TransactionType {
  ORDER
  REFUND
  PAYMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DealStage { 
  NEW
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

model Company {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  contactEmail String?
  timezone     String
  dateFormat   String

  forecastedRevenue Float?
  forecastedExpenses Float?

  users        User[]
  categories   Category[]
  transactions Transaction[]
  products     Product[]
  customers    Customer[]

  // HR models
  departments        Department[]
  employees          Employee[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]

  // Workflow & documents
  tasks     Task[]
  documents Document[]
  reports Report[]
  contacts Contact[]

  Workspace Workspace[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  firstName String?
  lastName  String?
  role      Role     @default(USER)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  otpSecret  String? @unique
  resetToken String? @unique

  createdAt DateTime @default(now())

  // If you treat login users as employees, you can link to Employee:
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @unique

  transactions Transaction[]
  PerformanceReview PerformanceReview[]
  reports Report[]
  deals Deal[]

  members Member[]
}

model Category {
  id        String       @id @default(cuid())
  name      String
  type      CategoryType
  budgetLimit Float?
  budgetUsed  Float?
  company   Company      @relation(fields: [companyId], references: [id])
  companyId String

  transactions Transaction[]
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  date        DateTime
  description String?
  createdAt   DateTime        @default(now())
  type        TransactionType
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  status      TransactionStatus @default(PENDING)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Report {
    id          String   @id @default(cuid())
  title       String
  fileUrl     String   // if you store file in S3 or similar
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  unitPrice   Float
  quantity    Int
  threshold   Int?
  description String?
  createdAt   DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  lastContacted DateTime?
  notes         String?
  createdAt     DateTime  @default(now())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

// === Project Management Models ===

// Represents a workspace (e.g., a project or team within a company)
model Workspace {
  id          String    @id @default(uuid())
  name        String
  companyId   String    // Foreign key to Company
  company     Company   @relation(fields: [companyId], references: [id])
  imageUrl    String?
  fileId      String?   // Reference to an uploaded file, e.g., in a storage service
  inviteCode  String    @unique @default(cuid()) // Unique code for joining
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     Member[]  // Members of this workspace

  projects Project[]

  tasks Task[]
}

// Represents a user's membership in a workspace
model Member {
  id          String    @id @default(uuid())
  userId      String    // Foreign key to User
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String    // Foreign key to Workspace
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        Role      @default(MEMBER) // Enum: ADMIN or MEMBER
  color       String    // Random color for UI purposes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]    @relation("TaskAssignment") // Tasks assigned to this member
}

model Project {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  imageUrl    String?   // URL of the uploaded image
  fileId      String?   // Identifier for the image in storage (e.g., S3 or Vercel Blob)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]    // One-to-many relationship with tasks
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(BACKLOG)
  createdAt   DateTime   @default(now())
  dueDate     DateTime?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  assigneeId  String?   // Foreign key to Member (nullable if unassigned)
  assignee    Member?   @relation("TaskAssignment", fields: [assigneeId], references: [id])
  company     Company    @relation(fields: [companyId], references: [id])
  companyId   String
  position    Int
}


// === HR / Employee Management Models ===

model Department {
  id        String  @id @default(cuid())
  name      String
  description String?
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  employees Employee[]
}

model Employee {
  id           String         @id @default(cuid())
  firstName    String
  lastName     String
  email        String         @unique
  phone        String?
  hireDate     DateTime?
  jobTitle     String?
  status       EmployeeStatus @default(ACTIVE)
  department   Department?    @relation(fields: [departmentId], references: [id])
  departmentId String?
  // Optional link back to User for login
  user         User?          @relation
  salary       Float?
  createdAt    DateTime       @default(now())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  payrolls           Payroll[]
  performanceReviews PerformanceReview[]
  documents          Document[]          @relation("DocumentOwnership")
}

model Payroll {
  id          String    @id @default(cuid())
  payPeriod   String? // e.g., "2025-06" or date-range string
  grossAmount Float?
  taxAmount   Float?
  netAmount   Float
  issuedDate  DateTime?
  notes       String?
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String

  createdAt DateTime @default(now())
}

model PerformanceReview {
  id         String            @id @default(cuid())
  reviewDate DateTime          @default(now())
  rating     PerformanceRating
  comments   String?
  employee   Employee          @relation(fields: [employeeId], references: [id])
  employeeId String
  reviewer   User?             @relation(fields: [reviewerId], references: [id])
  reviewerId String?
  company    Company           @relation(fields: [companyId], references: [id])
  companyId  String
}

model Document {
  id          String    @id @default(cuid())
  title       String
  fileUrl     String
  description String?
  uploadedAt  DateTime  @default(now())
  // Owner or uploader
  owner       Employee? @relation("DocumentOwnership", fields: [ownerId], references: [id])
  ownerId     String?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String?
  entity    String?
  entityId  String?
  userId    String?
  description String?
  url String?
  timestamp DateTime @default(now())
  companyId   String?
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  userId    String?
  createdAt DateTime @default(now())
}

model Contact {
  id          String               @id @default(cuid())
  fullName    String
  email       String               @unique
  phone       String?
  companyName String?              // optional free‑text, if you still want it
  jobTitle    String?
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // multi‑tenant linkage
  companyId   String
  company     Company              @relation(fields: [companyId], references: [id])

  deals       Deal[]
  logs        CommunicationLog[]
}


model Deal {
  id          String     @id @default(cuid())
  title       String
  amount      Float
  stage       DealStage  @default(NEW)
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   String
  owner       User?      @relation(fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  communicationLogs CommunicationLog[]
}

model CommunicationLog {
  id        String   @id @default(cuid())
  type      String   // email, sms, call
  direction String   // inbound, outbound
  message   String?
  timestamp DateTime @default(now())
  deal      Deal?    @relation(fields: [dealId], references: [id])
  dealId    String?
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?
}
