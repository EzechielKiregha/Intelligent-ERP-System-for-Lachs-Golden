// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  USER
  MEMBER
}
enum UserStatus {
  ACCEPTED
  PENDING
  BLOCKED
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PerformanceRating {
  EXCEEDS
  MEETS
  NEEDS_IMPROVEMENT
}

enum TaskStatus {
  BACKLOG
  IN_PROGRESS
  TODO
  DONE
  IN_REVIEW
}

enum TransactionType {
  ORDER
  REFUND
  PAYMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DealStage { 
  NEW
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

model Company {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  contactEmail      String?
  contactPhone      String?   // New: Company phone number
  website           String?   // New: Company website URL
  timezone          String
  dateFormat        String
  industry          String?   // New: e.g., "Technology", "Finance"
  foundedDate       DateTime? // New: Date company was founded
  employeeCount     Int?      // New: Approximate number of employees
  taxId             String?   // New: Tax identification number
  addressLine1      String?   // New: Street address
  addressLine2      String?   // New: Additional address info
  city              String?   // New: City
  state             String?   // New: State/Province
  postalCode        String?   // New: ZIP/Postal code
  country           String?   // New: Country
  forecastedRevenue Float?
  forecastedExpenses Float?

  // logoImageId         String?    // New: Foreign key to Image
  // logoImage         Image?    @relation("CompanyLogo", fields: [logoImageId], references: [id])

  owners            User[]    @relation("CompanyOwners") // New: Owners linked to Users
  users             User[]    @relation("CompanyUsers")
  categories        Category[]
  transactions      Transaction[]
  products          Product[]
  customers         Customer[]
  departments       Department[]
  employees         Employee[]
  payrolls          Payroll[]
  performanceReviews PerformanceReview[]
  tasks             Task[]
  documents         Document[]
  reports           Report[]
  contacts          Contact[]
  workspaces        Workspace[]

  images Image[] @relation("CompanyLogo")
}

model Image {
  id          String    @id @default(cuid())
  url         String    // URL from Vercel Blob
  pathname    String?   // Pathname from Vercel Blob
  contentType String?   // e.g., "image/jpeg"
  size        Int?      // File size in bytes
  uploadedAt  DateTime  @default(now())
  companyId   String?
  company     Company?  @relation("CompanyLogo", fields: [companyId], references: [id])
  workspaceId String?
  workspace   Workspace? @relation("WorkspaceImage", fields: [workspaceId], references: [id])
  projectId String?
  project   Project? @relation("ProjectImage", fields: [projectId], references: [id])
  userId      String?
  user        User?            @relation("UserImage",fields: [userId], references: [id])

}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  password     String?
  firstName    String?
  lastName     String?
  role         Role     @default(USER)
  status       UserStatus @default(PENDING)
  company      Company? @relation("CompanyUsers", fields: [companyId], references: [id])
  companyId    String?
  currentCompanyId  String?
  ownedCompanies Company[] @relation("CompanyOwners") // New: Companies owned by this user
  otpSecret    String?  @unique
  resetToken   String?  @unique
  createdAt    DateTime @default(now())
  employee     Employee? @relation(fields: [employeeId], references: [id])
  employeeId   String?  @unique
  transactions Transaction[]
  performanceReviews PerformanceReview[]
  reports      Report[]
  deals        Deal[]
  members      Member[]

  images Image[] @relation("UserImage")
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  // imageId     String   @unique
  // image       Image?    @relation("WorkspaceImage", fields: [imageId], references: [id])
  inviteCode  String    @unique @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     Member[]
  projects    Project[]
  tasks       Task[]

  images Image[] @relation("WorkspaceImage")
}

// Remaining models unchanged for brevity
model Member {
  id          String    @id @default(uuid())
  userId      String
  name        String?
  email       String?
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        Role      @default(MEMBER)
  color       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]    @relation("TaskAssignment")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  // imageId     String?   // Changed: Foreign key to Image
  // image       Image?    @relation(fields: [imageId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]

  images Image[] @relation("ProjectImage")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(BACKLOG)
  createdAt   DateTime   @default(now())
  dueDate     DateTime?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  assigneeId  String?
  assignee    Member?   @relation("TaskAssignment", fields: [assigneeId], references: [id])
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  position    Int
}

model Category {
  id          String       @id @default(cuid())
  name        String
  type        CategoryType
  budgetLimit Float?
  budgetUsed  Float?
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  transactions Transaction[]
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  date        DateTime
  description String?
  createdAt   DateTime        @default(now())
  type        TransactionType
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  status      TransactionStatus @default(PENDING)
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  company     Company         @relation(fields: [companyId], references: [id])
  companyId   String
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  unitPrice   Float
  quantity    Int
  threshold   Int?
  description String?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  lastContacted DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  employees   Employee[]
}

model Employee {
  id           String         @id @default(cuid())
  firstName    String
  lastName     String
  email        String         @unique
  phone        String?
  hireDate     DateTime?
  jobTitle     String?
  status       EmployeeStatus @default(ACTIVE)
  department   Department?    @relation(fields: [departmentId], references: [id])
  departmentId String?
  user         User?          @relation
  salary       Float?
  createdAt    DateTime       @default(now())
  company      Company        @relation(fields: [companyId], references: [id])
  companyId    String
  payrolls     Payroll[]
  performanceReviews PerformanceReview[]
  documents    Document[]     @relation("DocumentOwnership")
}

model Payroll {
  id          String    @id @default(cuid())
  payPeriod   String?
  grossAmount Float?
  taxAmount   Float?
  netAmount   Float
  issuedDate  DateTime?
  notes       String?
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  createdAt   DateTime @default(now())
}

model PerformanceReview {
  id         String            @id @default(cuid())
  reviewDate DateTime          @default(now())
  rating     PerformanceRating
  comments   String?
  employee   Employee          @relation(fields: [employeeId], references: [id])
  employeeId String
  reviewer   User?             @relation(fields: [reviewerId], references: [id])
  reviewerId String?
  company    Company           @relation(fields: [companyId], references: [id])
  companyId  String
}

model Document {
  id          String    @id @default(cuid())
  title       String
  fileUrl     String
  description String?
  uploadedAt  DateTime  @default(now())
  owner       Employee? @relation("DocumentOwnership", fields: [ownerId], references: [id])
  ownerId     String?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String?
  entity      String?
  entityId    String?
  userId      String?
  description String?
  url         String?
  timestamp   DateTime  @default(now())
  companyId   String?
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  userId    String?
  createdAt DateTime @default(now())
}

model Contact {
  id          String    @id @default(cuid())
  fullName    String
  email       String    @unique
  phone       String?
  companyName String?
  jobTitle    String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  deals       Deal[]
  logs        CommunicationLog[]
}

model Deal {
  id          String     @id @default(cuid())
  title       String
  amount      Float
  stage       DealStage  @default(NEW)
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   String
  owner       User?      @relation(fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  communicationLogs CommunicationLog[]
}

model CommunicationLog {
  id        String   @id @default(cuid())
  type      String
  direction String
  message   String?
  timestamp DateTime @default(now())
  deal      Deal?    @relation(fields: [dealId], references: [id])
  dealId    String?
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?
}